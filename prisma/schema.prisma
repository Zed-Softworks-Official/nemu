generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Portfolio {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  auth0id String
  image   String
  name    String
}

model ArtistVerification {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  auth0id         String @unique
  requestedHandle String @unique
  username        String
  twitter         String
  pixiv           String
  location        String
}

model Device {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  auth0id   String
  browser   String
  os        String
  platform  String
  ip        String
  location  String
  isDesktop Boolean
  isMobile  Boolean
}

model Artist {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @db.ObjectId
  stripeAccId String

  handle   String
  about    String  @default("Peko Peko")
  location String  @default("Nemu's basement")
  store    Boolean @default(false)
  twitter  String
  pixiv    String
  website  String
  terms    String  @default("Pls Feed Nemu")

  headerPhoto  String
  profilePhoto String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StoreItem {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  auth0id     String
  product     String
  stripeAccId String
}

model AritstCode {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  code String
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Artist        Artist[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expiers    DateTime

  @@unique([identifier, token])
}
