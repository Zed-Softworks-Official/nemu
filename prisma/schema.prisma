generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////////////////////////////////////////////
// Artists
//////////////////////////////////////////////////////////

model Artist {
  id            String @id @default(cuid())
  userId        String @unique
  stripeAccount String

  createdAt DateTime @default(now())

  handle    String  @unique
  about     String  @default("Peko Peko")
  location  String  @default("Nemu's basement")
  terms     String  @default("Pls Feed Nemu")
  tipJarUrl String?

  automatedCommissionMessage String?
  automatedMessageEnabled    Boolean @default(false)

  headerPhoto  String @default("/curved0.jpg")
  profilePhoto String @default("/profile.png")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  commissions    Commission[]
  products       Product[]
  portfolioItems Portfolio[]
  forms          Form[]
  socials        Social[]
  customerIds    StripeCustomerIds[]
}

model AritstCode {
  id   String @id @default(cuid())
  code String

  createdAt DateTime @default(now())
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ArtistVerification {
  id              String @id @default(cuid()) @map("_id")
  userId          String @unique
  requestedHandle String @unique
  username        String
  location        String

  twitter String?
  pixiv   String?
  website String?

  createdAt DateTime @default(now())
}

model Social {
  id       String @id @default(cuid()) @map("_id")
  artistId String
  agent    String
  url      String

  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

//////////////////////////////////////////////////////////
// Users
//////////////////////////////////////////////////////////

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?   
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Int       @default(0)

  hasSendbirdAccount Boolean @default(false)

  accounts        Account[]
  sessions        Session[]
  artist          Artist?
  formSubmissions FormSubmission[]
  customerIds     StripeCustomerIds[]
  downloads       Downloads[]
  reviews         Review[]
  favorites       Favorite[]
}

model StripeCustomerIds {
  id            String @id @default(cuid())
  customerId    String
  stripeAccount String

  artistId String
  userId   String

  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Downloads {
  id         String  @id @default(cuid())
  userId     String
  fileKey    String
  receiptURL String?

  createdAt DateTime @default(now())

  artistId         String
  productId        String?
  commissionId     String?
  formSubmissionId String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id      String @id @default(cuid())
  userId  String
  rating  Int
  content String

  createdAt DateTime @default(now())
  delivered Boolean  @default(false)

  commissionId String?
  productId    String?
  submissionId String?

  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  commissions Commission?     @relation(fields: [commissionId], references: [id], onDelete: Cascade)
  products    Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  submission  FormSubmission? @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model Favorite {
  id       String @id @default(cuid())
  userId   String
  artistId String

  commissionId String?
  productId    String?

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//////////////////////////////////////////////////////////
// Portfolio
//////////////////////////////////////////////////////////

model Portfolio {
  id       String @id @default(cuid())
  artistId String
  image    String
  name     String

  createdAt DateTime @default(now())

  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

//////////////////////////////////////////////////////////
// Store
//////////////////////////////////////////////////////////

model Product {
  id       String @id @default(cuid())
  artistId String

  title             String
  description       String
  price             Float
  featuredImage     String
  additionalImages  String[]
  downloadableAsset String
  slug              String

  published Boolean  @default(true)
  createdAt DateTime @default(now())

  artist  Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  reviews Review[]
}

//////////////////////////////////////////////////////////
// Commissions
//////////////////////////////////////////////////////////

model Commission {
  id       String @id @default(cuid())
  artistId String
  price    Int?

  formId String @unique

  title            String
  description      String
  featuredImage    String
  additionalImages String[]
  availability     Int
  slug             String

  published Boolean  @default(false)
  createdAt DateTime @default(now())

  maxCommissionsUntilWaitlist Int @default(0)
  maxCommissionsUntilClosed   Int @default(0)

  rushOrdersAllowed Boolean @default(false)
  rushCharge        Float
  rushPercentage    Boolean @default(false)

  artist  Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  form    Form?    @relation(fields: [formId], references: [id], onDelete: Cascade)
  reviews Review[]
}

model Invoice {
  id            String  @id @default(cuid())
  sent          Boolean @default(false)
  hostedUrl     String?
  paymentStatus Int
  paymentIntent String?

  stripeId  String?
  createdAt DateTime @default(now())

  customerId    String
  stripeAccount String

  userId       String
  artistId     String
  submissionId String

  items InvoiceItem[]
}

model InvoiceItem {
  id        String @id @default(cuid())
  invoiceId String

  name     String
  price    Float
  quantity Int

  createdAt DateTime @default(now())

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Form {
  id           String  @id @default(cuid())
  artistId     String
  commissionId String?

  name        String
  description String
  createdAt   DateTime @default(now())
  content     String   @default("[]")

  submissions         Int @default(0)
  newSubmissions      Int @default(0)
  acceptedSubmissions Int @default(0)
  rejectedSubmissions Int @default(0)

  artist     Artist      @relation(fields: [artistId], references: [id], onDelete: Cascade)
  commission Commission?

  formSubmissions FormSubmission[]

  @@unique([name, artistId])
}

model FormSubmission {
  id        String   @id @default(cuid())
  formId    String
  userId    String
  createdAt DateTime @default(now())
  waitlist  Boolean  @default(false)

  commissionStatus Int @default(0)

  orderId   String  @unique
  invoiceId String? @unique

  sendbirdChannelURL String?

  kanbanId String?

  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  downloadId String?

  content String
  Review  Review[]
}

model Kanban {
  id         String @id @default(cuid())
  containers String @default("[]")
  tasks      String @default("[]")

  formSubmissionId String
}
