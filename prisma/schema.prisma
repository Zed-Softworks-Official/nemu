generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//////////////////////////////////////////////////////////
// Artists
//////////////////////////////////////////////////////////

model Artist {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @unique @db.ObjectId
  stripeAccId String

  createdAt DateTime @default(now())

  handle   String
  about    String @default("Peko Peko")
  location String @default("Nemu's basement")
  twitter  String
  pixiv    String
  website  String
  terms    String @default("Pls Feed Nemu")

  automatedCommissionMessage String?
  automatedMessageEnabled    Boolean @default(false)

  headerPhoto  String
  profilePhoto String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  commissions    Commission[]
  products       Product[]
  portfolioItems Portfolio[]
  forms          Form[]
  socials        Social[]
  customerIds    StripeCustomerIds[]
}

model AritstCode {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  code String

  createdAt DateTime @default(now())
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ArtistVerification {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId          String @unique
  requestedHandle String @unique
  username        String
  location        String

  createdAt DateTime @default(now())
}

model Social {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  artistId String @db.ObjectId
  agent    String
  url      String

  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

//////////////////////////////////////////////////////////
// Users
//////////////////////////////////////////////////////////

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Int?

  hasSendbirdAccount Boolean @default(false)

  accounts        Account[]
  sessions        Session[]
  artist          Artist?
  formSubmissions FormSubmission[]
  customerIds     StripeCustomerIds[]
  downloads       Downloads[]
  reviews         Review[]
  favorites       Favorite[]
}

model StripeCustomerIds {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  customerId    String
  stripeAccount String

  artistId String @db.ObjectId
  userId   String @db.ObjectId

  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Downloads {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  userId     String  @db.ObjectId
  fileKey    String
  receiptURL String?

  createdAt DateTime @default(now())

  artistId         String
  productId        String?
  commissionId     String?
  formSubmissionId String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  rating  Float
  content String

  createdAt DateTime @default(now())
  delivered Boolean  @default(false)

  commissionId String? @db.ObjectId
  productId    String? @db.ObjectId

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  commissions Commission? @relation(fields: [commissionId], references: [id], onDelete: Cascade)
  products    Product?    @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Favorite {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  artistId String @db.ObjectId

  commissionId String?
  productId    String?

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//////////////////////////////////////////////////////////
// Portfolio
//////////////////////////////////////////////////////////

model Portfolio {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  artistId String @db.ObjectId
  image    String
  name     String

  createdAt DateTime @default(now())

  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

//////////////////////////////////////////////////////////
// Store
//////////////////////////////////////////////////////////

model Product {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  artistId String @db.ObjectId

  title             String
  description       String
  price             Float
  featuredImage     String
  additionalImages  String[]
  downloadableAsset String
  slug              String

  published Boolean  @default(true)
  createdAt DateTime @default(now())

  artist  Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  reviews Review[]
}

//////////////////////////////////////////////////////////
// Commissions
//////////////////////////////////////////////////////////

model Commission {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  artistId String @db.ObjectId
  price    Int?

  formId String @unique @db.ObjectId

  title            String
  description      String
  featuredImage    String
  additionalImages String[]
  availability     Int
  slug             String

  published    Boolean  @default(false)
  createdAt    DateTime @default(now())
  useInvoicing Boolean  @default(false)

  maxCommissionsUntilWaitlist Int @default(0)
  maxCommissionsUntilClosed   Int @default(0)

  rushOrdersAllowed Boolean @default(false)
  rushCharge        Float
  rushPercentage    Boolean @default(false)

  artist  Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  Form    Form?    @relation(fields: [formId], references: [id], onDelete: Cascade)
  reviews Review[]
}

model Form {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  artistId     String  @db.ObjectId
  commissionId String?

  name        String
  description String
  createdAt   DateTime @default(now())
  content     String   @default("[]")

  submissions         Int @default(0)
  newSubmissions      Int @default(0)
  acceptedSubmissions Int @default(0)
  rejectedSubmissions Int @default(0)

  artist     Artist      @relation(fields: [artistId], references: [id], onDelete: Cascade)
  commission Commission?

  formSubmissions FormSubmission[]

  @@unique([name, artistId])
}

model FormSubmission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  formId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  commissionStatus Int @default(0)

  paymentStatus    Int
  paymentIntent    String?
  orderId          String  @unique
  invoiceId        String?
  invoiceSent      Boolean @default(false)
  invoiceContent   String?
  invoiceHostedUrl String?

  sendbirdChannelURL String?

  kanbanId String @unique @db.ObjectId

  form   Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  kanban Kanban @relation(fields: [kanbanId], references: [id], onDelete: Cascade)

  downloadId String?

  content String
}

model Kanban {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  containers String @default("[]")
  tasks      String @default("[]")

  formSubmission FormSubmission?
}
